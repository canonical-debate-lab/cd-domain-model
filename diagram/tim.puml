@startuml

class Claim {
  String? sentence
  ' String negation_sentence  (must be != sentence)
  String generate_sentence()
  String get_sentence()
}

Claim "*" <-> "*" Claim : > equivalent_to
note  "implicitly reflexive, symmetric, transitive?" as N2
(Claim, Claim) . N2

'(Claim, Claim) . ClaimEquivalence
'ClaimEquivalenceClass o-> "*" Claim

'ClaimEquivalence "*" -> "*" ClaimEquivalence : > negation

Claim "*" -> "*" Claim : > negation
note  "anti-reflexive, symmetric, anti-transitive?" as N1
(Claim, Claim) .. N1

'Claim o-> Claim : > supports

class Argument {
  boolean is_support
  Claim premise
  Claim conclusion
}
note right: "A negation B, B equivalent_to C => A negation C"

Claim "1" <- Argument: < premise 
Claim "1" <- Argument: < conclusion

Claim <|-- Argument


@enduml

